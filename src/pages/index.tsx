import type { GetStaticProps, NextPage } from 'next'

import Head from 'next/head'
import styles from '../styles/Home.module.css'
import api from '@services/api'
import AppLoading from '@components/atoms/AppLoading'
import { useEffect, useRef, useState } from 'react'
import { debounce } from '@utils/index'
import { Transition } from 'react-transition-group'
import Hero from '@components/organisms/Hero'
import Header from '@components/organisms/Header'
import { Collection } from '@components/atoms'

type HomeProps = {
  movies: Array<Movie & { certification: Certification | null }>
  heroData: Movie & {
    runtime: number
    genres: Array<{ id: number; name: string }>
    certification: Certification
  }
}

const defaultStyle = {
  transition: `opacity 500ms ease-in-out`,
  opacity: 0
}

const transitionStyles = {
  entering: { opacity: 1 },
  entered: { opacity: 1 },
  exiting: { opacity: 0 },
  exited: { opacity: 0 },
  unmounted: { opacity: 0 }
}

const Home: NextPage<HomeProps> = ({ movies, heroData }) => {
  const [loading, setLoading] = useState(true)
  const refAppLoading = useRef(null)
  const refMain = useRef<HTMLDivElement>(null)

  const handleWithLoad = () => {
    debounce(() => setLoading(false), 1800)
  }

  useEffect(() => {
    window.addEventListener('load', handleWithLoad)

    return () => {
      window.removeEventListener('load', handleWithLoad)
    }
  }, [])

  useEffect(() => {
    if (!loading) {
      refMain.current!.style.display = 'flex'
    }
  }, [loading])

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Header />

      <main className={styles.main} ref={refMain}>
        <Hero data={heroData} />
        <div style={{ width: '100%', height: 200, position: 'relative' }}>
          <Collection
            src='https://m.media-amazon.com/images/I/81vTHovrz+L._AC_SL1500_.jpg'
            alt='homem de ferro'
          />
          <Collection
            src='https://m.media-amazon.com/images/I/81vTHovrz+L._AC_SL1500_.jpg'
            alt='homem de ferro'
          />
        </div>
        {/* <ul>
          {movies.map((movie) => {
            return (
              <li key={movie.id} onClick={() => getVideo(movie.id)}>
                {movie.title} {movie.id}
              </li>
            )
          })}
        </ul> */}
      </main>
      <Transition
        in={loading}
        timeout={1000}
        nodeRef={refAppLoading}
        unmountOnExit
      >
        {(state) => (
          <div
            ref={refAppLoading}
            style={{
              ...defaultStyle,
              ...transitionStyles[state]
            }}
          >
            <AppLoading />
          </div>
        )}
      </Transition>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  console.log('\x1b[32m', '\nâœ… Index Page created with success')

  const {
    data: { results: movies }
  }: { data: { results: Movie[] } } = await api.get(`movie/popular`)

  const moviesWithAllData = await Promise.all(
    movies.map(async (movie) => {
      const {
        data: { results }
      }: { data: { results: Certification[] } } = await api.get(
        `movie/${movie.id}/release_dates`
      )
      const certification =
        results.find((cert) => cert.iso_3166_1 === 'US') || null

      return { ...movie, certification }
    })
  )

  let { data: heroData } = await api.get('movie/791373')
  const {
    data: { results: heroResults }
  }: { data: { results: Certification[] } } = await api.get(
    `movie/791373/release_dates`
  )

  const heroCertification = heroResults.find(
    (heroResult) => heroResult.iso_3166_1 === 'US'
  )

  return {
    props: {
      movies: moviesWithAllData,
      heroData: { ...heroData, certification: heroCertification }
    }
  }
}

export default Home
